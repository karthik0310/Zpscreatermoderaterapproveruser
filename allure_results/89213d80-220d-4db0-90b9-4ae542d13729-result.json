{"name": "test_verify_success_message", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=128.0.6613.114)\nStacktrace:\n\tGetHandleVerifier [0x00007FF64972B632+29090]\n\t(No symbol) [0x00007FF64969E6E9]\n\t(No symbol) [0x00007FF64955B1CA]\n\t(No symbol) [0x00007FF64952FAF5]\n\t(No symbol) [0x00007FF6495DE2E7]\n\t(No symbol) [0x00007FF6495F5EE1]\n\t(No symbol) [0x00007FF6495D6493]\n\t(No symbol) [0x00007FF6495A09B1]\n\t(No symbol) [0x00007FF6495A1B11]\n\tGetHandleVerifier [0x00007FF649A4883D+3294125]\n\tGetHandleVerifier [0x00007FF649A94423+3604371]\n\tGetHandleVerifier [0x00007FF649A8A2E7+3563095]\n\tGetHandleVerifier [0x00007FF6497E6F16+797318]\n\t(No symbol) [0x00007FF6496A986F]\n\t(No symbol) [0x00007FF6496A5454]\n\t(No symbol) [0x00007FF6496A55E0]\n\t(No symbol) [0x00007FF649694A7F]\n\tBaseThreadInitThunk [0x00007FFA0C57257D+29]\n\tRtlUserThreadStart [0x00007FFA0D5AAF28+40]", "trace": "setup = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"bcbc6d3b758d404b4638d2bdc565ecf5\")>, 'screenshots', <RootLogger root (WARNING)>)\n\n    @allure.feature(\"Form Submission\")\n    @allure.story(\"Verify success message after saving data\")\n    def test_verify_success_message(setup):\n        driver, screenshot_dir, logger = setup\n    \n        with allure.step(\"Submit the form and verify the success message\"):\n            try:\n                # Submit the form (you might need to locate and click the submit button)\n                # Example: driver.find_element(By.ID, 'submit_button_id').click()\n    \n                # Define XPath for the success alert message\n                success_message_xpath = \"//body/div[@class='ch-container']/div[@class='row']/div[@id='content']/div[1]\"\n    \n                # Wait for the success message to be visible\n>               success_message = WebDriverWait(driver, 10).until(\n                    EC.visibility_of_element_located((By.XPATH, success_message_xpath))\n                )\n\ntest_moderator_main_menu.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:156: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020C472A7590>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF649694A7F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFA0C57257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFA0D5AAF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=128.0.6613.114)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF64972B632+29090]\nE       \t(No symbol) [0x00007FF64969E6E9]\nE       \t(No symbol) [0x00007FF64955B1CA]\nE       \t(No symbol) [0x00007FF64952FAF5]\nE       \t(No symbol) [0x00007FF6495DE2E7]\nE       \t(No symbol) [0x00007FF6495F5EE1]\nE       \t(No symbol) [0x00007FF6495D6493]\nE       \t(No symbol) [0x00007FF6495A09B1]\nE       \t(No symbol) [0x00007FF6495A1B11]\nE       \tGetHandleVerifier [0x00007FF649A4883D+3294125]\nE       \tGetHandleVerifier [0x00007FF649A94423+3604371]\nE       \tGetHandleVerifier [0x00007FF649A8A2E7+3563095]\nE       \tGetHandleVerifier [0x00007FF6497E6F16+797318]\nE       \t(No symbol) [0x00007FF6496A986F]\nE       \t(No symbol) [0x00007FF6496A5454]\nE       \t(No symbol) [0x00007FF6496A55E0]\nE       \t(No symbol) [0x00007FF649694A7F]\nE       \tBaseThreadInitThunk [0x00007FFA0C57257D+29]\nE       \tRtlUserThreadStart [0x00007FFA0D5AAF28+40]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException\n\nDuring handling of the above exception, another exception occurred:\n\nsetup = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"bcbc6d3b758d404b4638d2bdc565ecf5\")>, 'screenshots', <RootLogger root (WARNING)>)\n\n    @allure.feature(\"Form Submission\")\n    @allure.story(\"Verify success message after saving data\")\n    def test_verify_success_message(setup):\n        driver, screenshot_dir, logger = setup\n    \n        with allure.step(\"Submit the form and verify the success message\"):\n            try:\n                # Submit the form (you might need to locate and click the submit button)\n                # Example: driver.find_element(By.ID, 'submit_button_id').click()\n    \n                # Define XPath for the success alert message\n                success_message_xpath = \"//body/div[@class='ch-container']/div[@class='row']/div[@id='content']/div[1]\"\n    \n                # Wait for the success message to be visible\n                success_message = WebDriverWait(driver, 10).until(\n                    EC.visibility_of_element_located((By.XPATH, success_message_xpath))\n                )\n    \n                # Take a screenshot when the success message appears\n                take_screenshot(driver, screenshot_dir, \"success_message_visible\")\n                logger.info(\"Success message 'Data Saved successfully!' is visible.\")\n    \n                # Additional verification, if needed\n                assert success_message.is_displayed(), \"Success message not displayed\"\n    \n            except Exception as e:\n                logger.error(f\"Error while verifying the success message: {str(e)}\")\n>               take_screenshot(driver, screenshot_dir, \"success_message_error\")\n\ntest_moderator_main_menu.py:193: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_moderator_main_menu.py:149: in take_screenshot\n    driver.save_screenshot(screenshot_path)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:829: in save_screenshot\n    return self.get_screenshot_as_file(filename)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:805: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:839: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:850: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020C472A7590>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF649694A7F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFA0C57257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFA0D5AAF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=128.0.6613.114)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF64972B632+29090]\nE       \t(No symbol) [0x00007FF64969E6E9]\nE       \t(No symbol) [0x00007FF64955B1CA]\nE       \t(No symbol) [0x00007FF64952FAF5]\nE       \t(No symbol) [0x00007FF6495DE2E7]\nE       \t(No symbol) [0x00007FF6495F5EE1]\nE       \t(No symbol) [0x00007FF6495D6493]\nE       \t(No symbol) [0x00007FF6495A09B1]\nE       \t(No symbol) [0x00007FF6495A1B11]\nE       \tGetHandleVerifier [0x00007FF649A4883D+3294125]\nE       \tGetHandleVerifier [0x00007FF649A94423+3604371]\nE       \tGetHandleVerifier [0x00007FF649A8A2E7+3563095]\nE       \tGetHandleVerifier [0x00007FF6497E6F16+797318]\nE       \t(No symbol) [0x00007FF6496A986F]\nE       \t(No symbol) [0x00007FF6496A5454]\nE       \t(No symbol) [0x00007FF6496A55E0]\nE       \t(No symbol) [0x00007FF649694A7F]\nE       \tBaseThreadInitThunk [0x00007FFA0C57257D+29]\nE       \tRtlUserThreadStart [0x00007FFA0D5AAF28+40]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "steps": [{"name": "Submit the form and verify the success message", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=128.0.6613.114)\nStacktrace:\n\tGetHandleVerifier [0x00007FF64972B632+29090]\n\t(No symbol) [0x00007FF64969E6E9]\n\t(No symbol) [0x00007FF64955B1CA]\n\t(No symbol) [0x00007FF64952FAF5]\n\t(No symbol) [0x00007FF6495DE2E7]\n\t(No symbol) [0x00007FF6495F5EE1]\n\t(No symbol) [0x00007FF6495D6493]\n\t(No symbol) [0x00007FF6495A09B1]\n\t(No symbol) [0x00007FF6495A1B11]\n\tGetHandleVerifier [0x00007FF649A4883D+3294125]\n\tGetHandleVerifier [0x00007FF649A94423+3604371]\n\tGetHandleVerifier [0x00007FF649A8A2E7+3563095]\n\tGetHandleVerifier [0x00007FF6497E6F16+797318]\n\t(No symbol) [0x00007FF6496A986F]\n\t(No symbol) [0x00007FF6496A5454]\n\t(No symbol) [0x00007FF6496A55E0]\n\t(No symbol) [0x00007FF649694A7F]\n\tBaseThreadInitThunk [0x00007FFA0C57257D+29]\n\tRtlUserThreadStart [0x00007FFA0D5AAF28+40]\n\n", "trace": "  File \"C:\\Users\\GrDs_MyGovK\\PycharmProjectsAutoTestingZPSCreatorModeratorAdmin\\pythonProject\\test_moderator_main_menu.py\", line 193, in test_verify_success_message\n    take_screenshot(driver, screenshot_dir, \"success_message_error\")\n  File \"C:\\Users\\GrDs_MyGovK\\PycharmProjectsAutoTestingZPSCreatorModeratorAdmin\\pythonProject\\test_moderator_main_menu.py\", line 149, in take_screenshot\n    driver.save_screenshot(screenshot_path)\n  File \"C:\\Users\\GrDs_MyGovK\\PycharmProjectsAutoTestingZPSCreatorModeratorAdmin\\pythonProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 829, in save_screenshot\n    return self.get_screenshot_as_file(filename)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\GrDs_MyGovK\\PycharmProjectsAutoTestingZPSCreatorModeratorAdmin\\pythonProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 805, in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\GrDs_MyGovK\\PycharmProjectsAutoTestingZPSCreatorModeratorAdmin\\pythonProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 839, in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\GrDs_MyGovK\\PycharmProjectsAutoTestingZPSCreatorModeratorAdmin\\pythonProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 850, in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\GrDs_MyGovK\\PycharmProjectsAutoTestingZPSCreatorModeratorAdmin\\pythonProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\GrDs_MyGovK\\PycharmProjectsAutoTestingZPSCreatorModeratorAdmin\\pythonProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1726230272760, "stop": 1726230272762}], "attachments": [{"name": "log", "source": "2d826170-88db-48d8-96d0-f78cb2f78c2d-attachment.txt", "type": "text/plain"}], "start": 1726230272760, "stop": 1726230272763, "uuid": "47042cbc-fc0f-4db1-86a7-c9277aa86636", "historyId": "f320038b5e50812a76ebc96cd896a1ef", "testCaseId": "f320038b5e50812a76ebc96cd896a1ef", "fullName": "test_moderator_main_menu#test_verify_success_message", "labels": [{"name": "story", "value": "Verify success message after saving data"}, {"name": "feature", "value": "Form Submission"}, {"name": "suite", "value": "test_moderator_main_menu"}, {"name": "host", "value": "DESKTOP-2GJCTFD"}, {"name": "thread", "value": "32500-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_moderator_main_menu"}]}